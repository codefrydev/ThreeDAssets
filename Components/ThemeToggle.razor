@using ThreeDAssets.Utility
@inject ThemeService ThemeService
@implements IDisposable

<button @onclick="ToggleTheme" 
        class="inline-flex items-center justify-center p-2.5 rounded-xl text-slate-700 dark:text-slate-300 hover:text-blue-600 dark:hover:text-blue-400 hover:bg-slate-100 dark:hover:bg-slate-700 transition-all duration-200 group border border-slate-300 dark:border-slate-600 bg-white dark:bg-slate-800"
        title="Toggle theme">
    
    @if (_isDarkTheme)
    {
        <!-- Sun icon for dark theme -->
        <div class="flex items-center space-x-2">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                      d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z">
                </path>
            </svg>
            <span class="text-xs font-medium">Light</span>
        </div>
    }
    else
    {
        <!-- Moon icon for light theme -->
        <div class="flex items-center space-x-2">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                      d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z">
                </path>
            </svg>
            <span class="text-xs font-medium">Dark</span>
        </div>
    }
</button>

@code {
    private bool _isDarkTheme = false;

    protected override async Task OnInitializedAsync()
    {
        _isDarkTheme = await ThemeService.GetCurrentThemeAsync() == "dark";
        ThemeService.OnThemeChanged += OnThemeChanged;
    }

    private async Task ToggleTheme()
    {
        await ThemeService.ToggleThemeAsync();
    }

    private async void OnThemeChanged()
    {
        _isDarkTheme = await ThemeService.GetCurrentThemeAsync() == "dark";
        StateHasChanged();
    }

    public void Dispose()
    {
        ThemeService.OnThemeChanged -= OnThemeChanged;
    }
}
